---
description: when implementing a client-side feature that requires persistancy and can be configured by the user (settings/config/etc..)
globs: 
alwaysApply: false
---
# Settings Usage Guidelines

This document provides guidelines on how to use the application's settings feature. The settings are a global, persistent object used to store application configurations.

## Accessing Settings

To access the settings, use the `useSettings` hook from `[src/client/settings/SettingsContext.tsx](mdc:src/client/settings/SettingsContext.tsx)`.

Example:
```typescript
import { useSettings } from '@/client/settings/SettingsContext';

const MyComponent = () => {
  const { settings } = useSettings();
  // Access specific settings like settings.aiModel
  return (
    <div>
      Current AI Model: {settings.aiModel}
    </div>
  );
};
```

## Updating Settings

To update settings, use the `updateSettings` function provided by the `useSettings` hook.

Example:
```typescript
import { useSettings } from '@/client/settings/SettingsContext';

const MyComponent = () => {
  const { updateSettings } = useSettings();

  const handleUpdateModel = (newModelId: string) => {
    updateSettings({ aiModel: newModelId });
  };

  // ...
};
```

## Clearing Cache

The settings context also provides a function to clear the application cache.

Example:
```typescript
import { useSettings } from '@/client/settings/SettingsContext';

const MyComponent = () => {
  const { clearCache } = useSettings();

  const handleClearAppCache = async () => {
    const result = await clearCache();
    if (result.success) {
      console.log('Cache cleared successfully');
    } else {
      console.error('Failed to clear cache:', result.message);
    }
  };

  // ...
};
```

## Settings UI

The user interface for managing settings is located in `[src/client/routes/Settings/Settings.tsx](mdc:src/client/routes/Settings/Settings.tsx)`. This component allows users to modify application settings, such as selecting an AI model and clearing the cache.

## Adding a New Settings Field

To add a new field to the settings:

1.  **Update the `Settings` interface** in `[src/client/settings/types.ts](mdc:src/client/settings/types.ts)`:
    ```typescript
    export interface Settings {
      aiModel: string;
      newField: boolean; // Add your new field here
    }
    ```

2.  **Update the `defaultSettings` object** in `[src/client/settings/types.ts](mdc:src/client/settings/types.ts)`:
    ```typescript
    export const defaultSettings: Settings = {
      aiModel: '',
      newField: false, // Provide a default value
    };
    ```

3.  **The `SettingsContext` in `[src/client/settings/SettingsContext.tsx](mdc:src/client/settings/SettingsContext.tsx)` will automatically pick up these changes** as it imports `Settings` and `defaultSettings` from `types.ts`.

4.  **(Optional) Update the UI** in `[src/client/routes/Settings/Settings.tsx](mdc:src/client/routes/Settings/Settings.tsx)` if the new setting needs to be configurable by the user.

## Key Files

-   **Settings Types**: `[src/client/settings/types.ts](mdc:src/client/settings/types.ts)` - Defines the `Settings` and `SettingsContextType` interfaces, and `defaultSettings`.
-   **Settings Context**: `[src/client/settings/SettingsContext.tsx](mdc:src/client/settings/SettingsContext.tsx)` - Defines the context, provider, and hook for settings.
-   **Settings Page UI**: `[src/client/routes/Settings/Settings.tsx](mdc:src/client/routes/Settings/Settings.tsx)` - The UI for users to manage settings.
-   **Example Usage in AIChat**: `[src/client/routes/AIChat/AIChat.tsx](mdc:src/client/routes/AIChat/AIChat.tsx)` - Demonstrates practical application of the settings context.