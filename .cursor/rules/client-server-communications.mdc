---
description: Client-Server Communication Guidelines
globs: 
alwaysApply: false
---
# Client-Server Communication Guidelines

## Simplified API Architecture

This project uses a simplified client-server communication pattern with a single API endpoint that handles all server-side operations:

```
/src
  /apis
    /apis.ts           - Registry of all API handlers (imports directly from server.ts files)
    /processApiCall.ts - Central processing logic with caching 
    /types.ts          - Shared API types (like ApiHandlerContext)
    /<domain>
      /types.ts        - Shared request/response types and DTOs for this domain
      /server.ts       - Server-side logic coordinator (imports handlers, re-exports from index.ts)
      /client.ts       - Client-side function(s) to call the API
      /index.ts        - Exports API name constants and the domain 'name' constant
      /handlers/       - Subdirectory for individual API operation handlers (if implementing more than 1 api hanler.ts
        operation2Handler.ts
  /pages
    /api
      /process.ts      - Single Next.js API route handler for all requests
```

## Creating a New API Endpoint

**Important Note on Multiple Handlers per Domain:** If your API domain (e.g., 'activity', 'userProfile') requires multiple distinct operations (e.g., create, get, update, delete), it is **strongly recommended** to organize thesewithin a `handlers/` subdirectory. See details below in point 3.

1.  **Define ALL Domain Types in `types.ts`** (`/src/apis/<domain>/types.ts`)
    *   Define request payload interfaces (e.g., `CreateActivityPayload`).
    *   Define response payload interfaces (e.g., `CreateActivityResponse`).
    *   Define client-facing Data Transfer Objects (DTOs) if the database schema contains types (like `ObjectId` or `Date` objects) that need conversion for client consumption (e.g., `ActivityClient` with string IDs and ISO date strings).
    *   Keep types simple and focused on the specific domain.
    *   **CRITICAL: ALL domain-related types MUST be defined in this `types.ts` and imported from there.**
    *   **NEVER duplicate or redefine types in React components or other files.**

2.  **Define API Names and Domain Name in `index.ts`** (`/src/apis/<domain>/index.ts`)
    *   Export a `name` constant for the domain (e.g., `export const name = 'activity';`).
    *   For each operation, define and export a unique API name constant (e.g., `export const API_CREATE_ACTIVITY_TYPE = 'activity/createActivityType';`).
    *   **IMPORTANT: Do NOT export handler functions or client functions from this file.**

3.  **Implement Server Logic (Handlers and Server Coordinator)**
    *   **A. Create `handlers/` Subdirectory** (`/src/apis/<domain>/handlers/`)
        *   For each distinct API operation, create a separate handler file (e.g., `createActivityTypeHandler.ts`, `getActivityTypesHandler.ts`).
        *   Each handler file should:
            *   Import necessary types (payloads, responses, `ApiHandlerContext`, `ObjectId`, collection types).
            *   Implement and export a `process` function:
                *   Signature: `async (payload: SpecificPayload, context: ApiHandlerContext): Promise<SpecificResponse>`
                *   Handle business logic, validation, database interactions, and error cases for that specific operation.
                *   Use `context.userId` (after converting to `ObjectId` if needed) for user-specific operations and authorization. Throw an error if `context.userId` is required but missing.
                *   Convert database entities to client-facing DTOs before returning (e.g., `ObjectId` to string, `Date` to ISO string).
    *   **B. Implement Server Coordinator in `server.ts`** (`)
        *   **MUST re-export all exports from `index.ts`**: Add `export * from './index';` at the top.
        *   Import all API name constants from `./index.ts`.
        *   Import the `process` function from each handler file in the `handlers/` subdirectory (e.g., `import { process as createActivityTypeProcess } from './handlers/createActivityTypeHandler';`).
        *   Construct and export a consolidated handlers object (e.g., `activityApiHandlers`). This object maps the API name constants to an object containing thn:
            ```typescript
            // Example for 'activity' domain in src/apis/activity/server.ts
            export const activityApiHandlers = {
              [API_CREATE_ACTIVITY_TYPE]: { process: createActivityTyp        [API_GET_ACTIVITY_TYPES]: { process: getActivityTypesProcess },
              // ... other mappings for other activity operations
            };
            ```
        *   **NEVER import any client-side code or `client.ts` functions here.**

4.  **Create Client Function(s) in `client.ts`** (`/src/apis/<domain>/client.ts`)
    *   For each operation, implement a client function that calls the API.
    *   Import `apiClient` (default import) from `@/client/utils/apiClient` (or relative path).
    *   Import `CacheResult` from `@/server/cache/types` (or relative path).
    *   Import API name constants from `./index.ts` (NEVER from `server.ts`).
    *   Import request/response types from `./types.ts`.
    *   The function should take the defined request payload type and return `Promise<CacheResult<DefinedResponseType>>`.
    *   Use `apiClient.call(API_NAME_CONSTANT, payloadObject)`.
    *   **IMPORTANT: This is the ONLY place that should call `apiClient.call` with these API names.**
    *   **NEVER import any server-side code or `server.ts` functions here.**

5.  **Register the API Handlers in `apis.ts`** (`/src/apis/apis.ts`)
    *   Import the consolidated handlers object (e.g., `activityApiHandlers`) from the domain's `server.ts` file (e.g., `import { activityApiHandlers } from "./activity/server";`).
    *   Spread this object into the main `apiHandlers` registry.
    *   Ensure each `process` function within the spread object is cast to the generic signature `(params: unknown, context: ApiHandlerContext) => Promise<unknown>` if type errors occur, for example:
        ```typescript
        const typedDomainApiHandlers = Object.entries(domainApiHandlers).reduce(
          (acc, [key, handler]) => {
            acc[key] = {
              process: handler.process as (params: unknown, context: ApiHandlerContext) => Promise<unknown>,
            };
            return acc;
          },
          {} as ApiHandlers // ApiHandlers is the type for the main registry
        );
        // Then spread ...typedDomainApiHandlers into the main apiHandlers object
        ```

## Key Guidelines Summary (Reiteration)

*   **Single API Entry Point**: Use `/pages/api/process.ts` for all requests. `processApiCall.ts` routes to handlers.
*   **API Name Flow & Exports**:
    1.  `/<domain>/index.ts`: Exports API name constants (e.g., `API_CREATE_X`) and the domain `name` (e.g., `name = 'activity';`). **No functions.**
    2.  `/<domain>/handlers/someHandler.ts`: Exports a `process` function.
    3.  `/<domain>/server.ts`: **Must `export * from './index';`**. Imports `process` functions from `handlers/` and API names from `./index.ts`. Exports a consolidated `domainApiHandlers` object.
    4.  `/<domain>/client.ts`: Imports API names from `./index.ts`. Imports types from `./types.ts`. Exports client-callable functions.
    5.  `/apis/apis.ts`: Imports `domainApiHandlers` object from `/<domain>/server.ts`.
*   **Client Access**: Components call domain-specific functions from `/<domain>/client.ts`.
*   **Caching**: Client functions return `CacheResult<T>`.
*   **Error Handling**: Server handlers should throw errors for issues; `processApiCall.ts` and `apiClient` handle packaging these.
*   **Type Safety**: Strict typing, no `any`. Types defined in `/<domain>/types.ts`.
*   **Separation of Concerns**: No client code in server files, no server code in client files. `index.ts` is for names/types only.

This structured approach ensures maintainability, type safety, and a clear separation of concerns.
